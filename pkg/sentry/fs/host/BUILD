package(licenses = ["notice"])  # Apache 2.0

load("//tools/go_stateify:defs.bzl", "go_library", "go_test")

go_library(
    name = "host",
    srcs = [
        "control.go",
        "descriptor.go",
        "descriptor_state.go",
        "device.go",
        "file.go",
        "fs.go",
        "inode.go",
        "inode_state.go",
        "ioctl_unsafe.go",
        "socket.go",
        "socket_state.go",
        "socket_unsafe.go",
        "util.go",
        "util_unsafe.go",
    ],
    importpath = "gvisor.googlesource.com/gvisor/pkg/sentry/fs/host",
    visibility = ["//pkg/sentry:internal"],
    deps = [
        "//pkg/abi/linux",
        "//pkg/fd",
        "//pkg/log",
        "//pkg/refs",
        "//pkg/secio",
        "//pkg/sentry/arch",
        "//pkg/sentry/context",
        "//pkg/sentry/device",
        "//pkg/sentry/fs",
        "//pkg/sentry/fs/fsutil",
        "//pkg/sentry/kernel",
        "//pkg/sentry/kernel/auth",
        "//pkg/sentry/kernel/time",
        "//pkg/sentry/memmap",
        "//pkg/sentry/safemem",
        "//pkg/sentry/socket/control",
        "//pkg/sentry/socket/unix",
        "//pkg/sentry/usermem",
        "//pkg/syserror",
        "//pkg/tcpip",
        "//pkg/tcpip/link/rawfile",
        "//pkg/tcpip/transport/unix",
        "//pkg/unet",
        "//pkg/waiter",
        "//pkg/waiter/fdnotifier",
        "@org_golang_x_sys//unix:go_default_library",
    ],
)

go_test(
    name = "host_test",
    size = "small",
    srcs = [
        "fs_test.go",
        "inode_test.go",
        "socket_test.go",
        "wait_test.go",
    ],
    embed = [":host"],
    deps = [
        "//pkg/fd",
        "//pkg/sentry/context",
        "//pkg/sentry/context/contexttest",
        "//pkg/sentry/fs",
        "//pkg/sentry/socket",
        "//pkg/sentry/usermem",
        "//pkg/syserr",
        "//pkg/tcpip",
        "//pkg/tcpip/transport/unix",
        "//pkg/waiter",
        "//pkg/waiter/fdnotifier",
    ],
)
